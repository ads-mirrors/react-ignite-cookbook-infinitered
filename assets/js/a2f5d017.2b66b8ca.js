"use strict";(self.webpackChunkignite_cookbook=self.webpackChunkignite_cookbook||[]).push([[916],{3884:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var r=n(7624),o=n(2172);const s={title:"Redux",description:"How to migrate a MobX-State-Tree project to Redux",tags:["Redux","MobX","State Management"],last_update:{author:"Justin Poliachik"},publish_date:new Date("2024-01-16T00:00:00.000Z")},i="Redux",a={id:"recipes/Redux",title:"Redux",description:"How to migrate a MobX-State-Tree project to Redux",source:"@site/docs/recipes/Redux.md",sourceDirName:"recipes",slug:"/recipes/Redux",permalink:"/docs/recipes/Redux",draft:!1,unlisted:!1,tags:[{label:"Redux",permalink:"/docs/tags/redux"},{label:"MobX",permalink:"/docs/tags/mob-x"},{label:"State Management",permalink:"/docs/tags/state-management"}],version:"current",lastUpdatedBy:"Justin Poliachik",lastUpdatedAt:1728940271,formattedLastUpdatedAt:"Oct 14, 2024",frontMatter:{title:"Redux",description:"How to migrate a MobX-State-Tree project to Redux",tags:["Redux","MobX","State Management"],last_update:{author:"Justin Poliachik"},publish_date:"2024-01-16T00:00:00.000Z"},sidebar:"mainSidebar",previous:{title:"React Native Vision Camera",permalink:"/docs/recipes/ReactNativeVisionCamera"},next:{title:"Remove MobX-State-Tree",permalink:"/docs/recipes/RemoveMobxStateTree"}},c={},d=[{value:"Remove MobX-State-Tree",id:"remove-mobx-state-tree",level:2},{value:"Add Redux",id:"add-redux",level:2},{value:"Install dependencies",id:"install-dependencies",level:4},{value:"Create Store",id:"create-store",level:4},{value:"Add State",id:"add-state",level:4},{value:"Add Redux Provider",id:"add-redux-provider",level:4},{value:"Hook up Components",id:"hook-up-components",level:4},{value:"Persistence",id:"persistence",level:2},{value:"Reactotron Support",id:"reactotron-support",level:2}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.M)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"redux",children:"Redux"}),"\n",(0,r.jsx)(t.p,{children:"This guide will show you how to migrate a MobX-State-Tree project (Ignite's default) to Redux, using a newly created Ignite project as our example:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"npx ignite-cli new ReduxApp --yes --removeDemo\n"})}),"\n",(0,r.jsx)(t.p,{children:"If you are migrating an existing project these steps still apply, but you may need to migrate your existing state tree and other additional functionality."}),"\n",(0,r.jsx)(t.h2,{id:"remove-mobx-state-tree",children:"Remove MobX-State-Tree"}),"\n",(0,r.jsxs)(t.p,{children:["First, follow our recipe to ",(0,r.jsx)(t.a,{href:"/docs/recipes/RemoveMobxStateTree",children:"Remove MobX-State-Tree"})," from your project. This will give you a blank slate to setup Redux."]}),"\n",(0,r.jsx)(t.h2,{id:"add-redux",children:"Add Redux"}),"\n",(0,r.jsx)(t.h4,{id:"install-dependencies",children:"Install dependencies"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.a,{href:"https://redux.js.org/introduction/getting-started#redux-toolkit",children:"redux-tooklit is the current recommended approach"}),", and you'll also need ",(0,r.jsx)(t.code,{children:"react-redux"})," bindings for your React Native app."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"yarn add @reduxjs/toolkit\nyarn add react-redux\n"})}),"\n",(0,r.jsx)(t.h4,{id:"create-store",children:"Create Store"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["In a new file ",(0,r.jsx)(t.code,{children:"app/store/store.ts"}),", create your Redux store.","\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Create an initial store. We're using ",(0,r.jsxs)(t.a,{href:"https://redux-toolkit.js.org/usage/usage-guide#simplifying-store-setup-with-configurestore",children:["Redux Toolkit's ",(0,r.jsx)(t.code,{children:"configureStore"})]})," here for simplicity."]}),"\n",(0,r.jsx)(t.li,{children:"Export Typescript helpers for the rest of your app to stay type safe."}),"\n",(0,r.jsxs)(t.li,{children:["We'll use ",(0,r.jsx)(t.code,{children:"app/store"})," directory for all our Redux reducers and store, but feel free to use any directory structure you like. Another popular option is to use ",(0,r.jsx)(t.a,{href:"https://redux.js.org/faq/code-structure",children:"feature folders"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",metastring:'title="/app/store/store.ts"',children:'import { configureStore } from "@reduxjs/toolkit";\nimport { TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";\nimport counterReducer from "./counterSlice";\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    // add other state here\n  },\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\n// Use throughout app instead of plain `useDispatch` and `useSelector` for type safety\ntype DispatchFunc = () => AppDispatch;\nexport const useAppDispatch: DispatchFunc = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n'})}),"\n",(0,r.jsx)(t.h4,{id:"add-state",children:"Add State"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Add your state reducers or ",(0,r.jsx)(t.a,{href:"https://redux-toolkit.js.org/usage/usage-guide#creating-slices-of-state",children:"slices"}),". We'll create a simple ",(0,r.jsx)(t.code,{children:"counter"})," slice for this example."]}),"\n",(0,r.jsxs)(t.li,{children:["If you have an existing state tree with MobX-State-Tree, you'll need to convert your tree into a series of Redux reducers.","\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Note: Redux does not define or validate your models like MobX-State-Tree does. It is up to you to ensure the correct data is being set in your reducers."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",metastring:'title="/app/store/counterSlice.ts"',children:'import { createSlice } from "@reduxjs/toolkit";\n\n// Define a type for the slice state\ninterface CounterState {\n  value: number;\n}\n\n// Define the initial state using that type\nconst initialState: CounterState = {\n  value: 0,\n};\n\nexport const counterSlice = createSlice({\n  name: "counter",\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState,\n  reducers: {\n    increment: (state) => {\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n  },\n});\n\nexport const { increment, decrement } = counterSlice.actions;\nexport default counterSlice.reducer;\n'})}),"\n",(0,r.jsx)(t.h4,{id:"add-redux-provider",children:"Add Redux Provider"}),"\n",(0,r.jsxs)(t.p,{children:["In ",(0,r.jsx)(t.code,{children:"app.tsx"}),", wrap your ",(0,r.jsx)(t.code,{children:"AppNavigator"})," with the react-redux Provider component"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-jsx",metastring:'title="/app/app.tsx"',children:'import { Provider } from "react-redux";\nimport { store } from "./store/store";\n\n...\n\n<Provider store={store}>\n  <AppNavigator\n    linking={linking}\n    initialState={initialNavigationState}\n    onStateChange={onNavigationStateChange}\n  />\n</Provider>\n'})}),"\n",(0,r.jsx)(t.h4,{id:"hook-up-components",children:"Hook up Components"}),"\n",(0,r.jsxs)(t.p,{children:["You can now use selectors to grab data and ",(0,r.jsx)(t.code,{children:"dispatch()"})," to execute actions within your components. Here's an example:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Remember to use our exported ",(0,r.jsx)(t.code,{children:"useAppSelector"})," and ",(0,r.jsx)(t.code,{children:"useAppDispatch"})," helpers for type safety"]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",metastring:'title="/app/screens/WelcomeScreen.tsx"',children:'import React, { FC } from "react";\nimport { View, ViewStyle } from "react-native";\nimport { Button, Text } from "app/components";\nimport { AppStackScreenProps } from "../navigators";\nimport type { ThemedStyle } from "app/theme";\nimport { useAppTheme } from "app/utils/useAppTheme";\nimport { useSafeAreaInsetsStyle } from "../utils/useSafeAreaInsetsStyle";\nimport { useAppDispatch, useAppSelector } from "app/store/store";\nimport { decrement, increment } from "app/store/counterSlice";\n\ninterface WelcomeScreenProps extends AppStackScreenProps<"Welcome"> {}\n\nexport const WelcomeScreen: FC<WelcomeScreenProps> = () => {\n  const { themed } = useAppTheme();\n  const $containerInsets = useSafeAreaInsetsStyle(["top", "bottom"]);\n  const count = useAppSelector((state) => state.counter.value);\n  const dispatch = useAppDispatch();\n  return (\n    <View style={themed([$containerInsets, $container])}>\n      <Button text="Increment" onPress={() => dispatch(increment())} />\n      <Button text="Decrement" onPress={() => dispatch(decrement())} />\n      <Text text={`Count: ${count}`} />\n    </View>\n  );\n};\n\nconst $container: ThemedStyle<ViewStyle> = ({ colors }) => ({\n  flex: 1,\n  backgroundColor: colors.background,\n});\n'})}),"\n",(0,r.jsx)(t.p,{children:"You're now using Redux!"}),"\n",(0,r.jsx)(t.h2,{id:"persistence",children:"Persistence"}),"\n",(0,r.jsx)(t.p,{children:"Ignite ships with built-in persistence support for MobX-State-Tree. We can add similar support for Redux by:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["Install ",(0,r.jsx)(t.a,{href:"https://github.com/rt2zz/redux-persist",children:(0,r.jsx)(t.code,{children:"redux-persist"})})]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"yarn add redux-persist\n"})}),"\n",(0,r.jsxs)(t.ol,{start:"2",children:["\n",(0,r.jsxs)(t.li,{children:["Modify ",(0,r.jsx)(t.code,{children:"store.ts"})," to include ",(0,r.jsx)(t.code,{children:"redux-persist"})]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",metastring:'title="/app/store/store.ts"',children:'import { combineReducers, configureStore } from "@reduxjs/toolkit";\nimport counterReducer from "./counterSlice";\nimport { TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";\nimport { persistStore, persistReducer, FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from "redux-persist";\nimport AsyncStorage from "@react-native-async-storage/async-storage";\n\nconst persistConfig = {\n  key: "root",\n  version: 1,\n  storage: AsyncStorage,\n};\n\nconst rootReducer = combineReducers({\n  counter: counterReducer,\n});\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }),\n});\n\nexport const persistor = persistStore(store);\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\n// Use throughout app instead of plain `useDispatch` and `useSelector` for type safety\ntype DispatchFunc = () => AppDispatch;\nexport const useAppDispatch: DispatchFunc = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n'})}),"\n",(0,r.jsxs)(t.ol,{start:"3",children:["\n",(0,r.jsxs)(t.li,{children:["Add a ",(0,r.jsx)(t.code,{children:"PersistGate"})," to ",(0,r.jsx)(t.code,{children:"app.tsx"})," and replace any existing ",(0,r.jsx)(t.code,{children:"hideSplashScreen"})," calls with the ",(0,r.jsx)(t.code,{children:"onBeforeLift"})," callback"]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",metastring:'title="/app/app.tsx"',children:'...\n\nimport { persistor, store } from "./store/store"\nimport { PersistGate } from "redux-persist/integration/react"\n\n...\n\nfunction App(props: AppProps) {\n  const { hideSplashScreen } = props\n...\n  const onBeforeLiftPersistGate = () => {\n    // If your initialization scripts run very fast, it\'s good to show the splash screen for just a bit longer to prevent flicker.\n    // Slightly delaying splash screen hiding for better UX; can be customized or removed as needed,\n    // Note: (vanilla Android) The splash-screen will not appear if you launch your app via the terminal or Android Studio. Kill the app and launch it normally by tapping on the launcher icon. https://stackoverflow.com/a/69831106\n    // Note: (vanilla iOS) You might notice the splash-screen logo change size. This happens in debug/development mode. Try building the app for release.\n    setTimeout(hideSplashScreen, 500)\n  }\n...\n  return (\n    <SafeAreaProvider initialMetrics={initialWindowMetrics}>\n      <ErrorBoundary catchErrors={Config.catchErrors}>\n        <GestureHandlerRootView style={$container}>\n          <Provider store={store}>\n            <PersistGate\n              loading={null}\n              onBeforeLift={onBeforeLiftPersistGate}\n              persistor={persistor}\n            >\n              <AppNavigator\n                linking={linking}\n                initialState={initialNavigationState}\n                onStateChange={onNavigationStateChange}\n              />\n            </PersistGate>\n          </Provider>\n        </GestureHandlerRootView>\n      </ErrorBoundary>\n    </SafeAreaProvider>\n  )\n}\n\nexport default App\n'})}),"\n",(0,r.jsx)(t.p,{children:"Your Redux state should now be persisted using AsyncStorage!"}),"\n",(0,r.jsx)(t.h2,{id:"reactotron-support",children:"Reactotron Support"}),"\n",(0,r.jsx)(t.p,{children:"Reactotron has a prebuilt plugin for Redux!"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://docs.infinite.red/reactotron/plugins/redux/",children:"Follow the instructions to install"})})]})}function p(e={}){const{wrapper:t}={...(0,o.M)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},2172:(e,t,n)=>{n.d(t,{I:()=>a,M:()=>i});var r=n(1504);const o={},s=r.createContext(o);function i(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);