"use strict";(self.webpackChunkignite_cookbook=self.webpackChunkignite_cookbook||[]).push([[3480],{2436:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var i=t(7624),s=t(2172);const r={title:"Migrating from i18n-js to react-i18next",description:"How to migrate from i18n-js to react-i18next",tags:["i18n"],last_update:{author:"Felipe Pe\xf1a"},publish_date:new Date("2024-09-25T00:00:00.000Z")},a="Migrating from i18n-js to react-i18next within an Ignite project",o={id:"recipes/MigratingToI18Next",title:"Migrating from i18n-js to react-i18next",description:"How to migrate from i18n-js to react-i18next",source:"@site/docs/recipes/MigratingToI18Next.md",sourceDirName:"recipes",slug:"/recipes/MigratingToI18Next",permalink:"/docs/recipes/MigratingToI18Next",draft:!1,unlisted:!1,tags:[{label:"i18n",permalink:"/docs/tags/i-18-n"}],version:"current",lastUpdatedBy:"Felipe Pe\xf1a",lastUpdatedAt:1730242442,formattedLastUpdatedAt:"Oct 29, 2024",frontMatter:{title:"Migrating from i18n-js to react-i18next",description:"How to migrate from i18n-js to react-i18next",tags:["i18n"],last_update:{author:"Felipe Pe\xf1a"},publish_date:"2024-09-25T00:00:00.000Z"},sidebar:"mainSidebar",previous:{title:"Maestro Setup",permalink:"/docs/recipes/MaestroSetup"},next:{title:"Migrating to MMKV",permalink:"/docs/recipes/MigratingToMMKV"}},l={},c=[{value:"Overview",id:"overview",level:2},{value:"Step 1: Manage dependencies",id:"step-1-manage-dependencies",level:2},{value:"Step 2: Set up initialization logic in app.tsx",id:"step-2-set-up-initialization-logic-in-apptsx",level:2},{value:"Step 3: Remove i18n-js from project",id:"step-3-remove-i18n-js-from-project",level:2},{value:"Step 4: Update the i18n initialization method",id:"step-4-update-the-i18n-initialization-method",level:2},{value:"Step 5: Add intl-pluralrules for react-i18next and JSON v4",id:"step-5-add-intl-pluralrules-for-react-i18next-and-json-v4",level:2},{value:"Step 6: Update the translate function",id:"step-6-update-the-translate-function",level:2},{value:"Step 7: Update translation keys from dots (.) to colons (:)",id:"step-7-update-translation-keys-from-dots--to-colons-",level:2},{value:"Example",id:"example",level:3},{value:"Step 8: Update types in i18n.ts",id:"step-8-update-types-in-i18nts",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"migrating-from-i18n-js-to-react-i18next-within-an-ignite-project",children:"Migrating from i18n-js to react-i18next within an Ignite project"}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:["In this guide, we will be going through the steps required to migrate your Ignite generated project from using ",(0,i.jsx)(n.code,{children:"i18n-js"})," to the ",(0,i.jsx)(n.code,{children:"react-i18next"})," library. It is meant specifically for projects generated with version 9 and below."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"react-i18next"})," will be included in Ignite's version 10. If you're using an earlier version, this guide provides the necessary steps to successfully complete the migration."]}),"\n",(0,i.jsx)(n.p,{children:"Finally, the steps outlined in this guide, are based on the changes outlined in the following two PRs:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/infinitered/ignite/pull/2770",children:"Swap out i18n-js for react-18next"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/infinitered/ignite/pull/2788",children:"Fix language switching and update date-fns to v4"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"step-1-manage-dependencies",children:"Step 1: Manage dependencies"}),"\n",(0,i.jsxs)(n.p,{children:["Remove the ",(0,i.jsx)(n.code,{children:"i18n-js"})," package and its types:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"yarn remove i18n-js @types/i18n-js@types/i18n-js\n"})}),"\n",(0,i.jsx)(n.p,{children:"Add the two new dependencies:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"yarn add react-i18next i18next\n"})}),"\n",(0,i.jsx)(n.h2,{id:"step-2-set-up-initialization-logic-in-apptsx",children:"Step 2: Set up initialization logic in app.tsx"}),"\n",(0,i.jsxs)(n.p,{children:["To ensure that ",(0,i.jsx)(n.code,{children:"react-i18next"})," finishes initializing before your app proceeds, we recommend adding state and logic to the ",(0,i.jsx)(n.code,{children:"app.tsx"})," entry file:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Create a state variable, ",(0,i.jsx)(n.code,{children:"isI18nInitialized"}),", to track initialization status."]}),"\n",(0,i.jsxs)(n.li,{children:["Use the ",(0,i.jsx)(n.code,{children:"useEffect"})," hook to set the state when initialization completes."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'\n// error-line\nimport "./i18n"\n// success-line\nimport { initI18n } from "./i18n"\n\n// ...extra file logic\n\n// success-line-start\nconst [isI18nInitialized, setIsI18nInitialized] = useState(false);\n\nuseEffect(() => {\n  initI18n().then(() => setIsI18nInitialized(true));\n}, []);\n// success-line-end\n'})}),"\n",(0,i.jsx)(n.p,{children:"Additionally, consider including the new state variable in the rendering condition for the app."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// error-line-start\nif (!rehydrated || !isNavigationStateRestored || (!areFontsLoaded && !fontLoadError)) {\n// error-line-end\n// success-line-start\nif (!rehydrated || !isNavigationStateRestored || !isI18nInitialized || (!areFontsLoaded && !fontLoadError)) {\n// success-line-end\n  return null\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This ensures that your app will wait until ",(0,i.jsx)(n.code,{children:"react-i18next"})," is fully initialized before continuing, preventing any issues with missing translations."]}),"\n",(0,i.jsx)(n.h2,{id:"step-3-remove-i18n-js-from-project",children:"Step 3: Remove i18n-js from project"}),"\n",(0,i.jsxs)(n.p,{children:["In ",(0,i.jsx)(n.code,{children:"app/i18n/i18n.ts"}),", delete the import line for i18n-js."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// error-line\nimport { I18n } from "i18n-js"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"step-4-update-the-i18n-initialization-method",children:"Step 4: Update the i18n initialization method"}),"\n",(0,i.jsxs)(n.p,{children:["Next, update your i18n initialization to use ",(0,i.jsx)(n.code,{children:"react-i18next"}),", which also includes RTL (right-to-left) language support and handles locale selection. In a Ingnite generated project, this is located in ",(0,i.jsx)(n.code,{children:"app/i18n/i18n.ts"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'\n// success-line-start\nimport * as i18next from "i18next"\nimport { initReactI18next } from "react-i18next"\nimport en from "./en"\nimport ar from "./ar"\nimport ko from "./ko"\nimport es from "./es"\nimport fr from "./fr"\nimport ja from "./ja"\nimport hi from "./hi"\n// success-line-end\n\n// ...extra file logic\n\n\n// error-line-start\nexport const i18n = new I18n(\n  { ar, en, "en-US": en, ko, fr, ja, hi },\n  { locale: fallbackLocale, defaultLocale: fallbackLocale, enableFallback: true },\n)\n// error-line-end\n// success-line-start\nconst resources = { ar, en, ko, es, fr, ja, hi }\n\nconst pickSupportedLocale: () => Localization.Locale | undefined = () => {\n  return systemLocales.find((locale) => systemTagMatchesSupportedTags(locale.languageTag))\n}\n\nconst locale = pickSupportedLocale()\n\nexport const initI18n = async () => {\n  await i18n.use(initReactI18next).init({\n    resources,\n    lng: locale?.languageTag ?? fallbackLocale,\n    fallbackLng: fallbackLocale,\n    interpolation: { escapeValue: false },\n  });\n\n  const locale = pickSupportedLocale();\n  if (locale?.textDirection === \'rtl\') {\n    I18nManager.allowRTL(true);\n    isRTL = true;\n  } else {\n    I18nManager.allowRTL(false);\n    isRTL = false;\n  }\n\n  return i18n;\n};\n// success-line-end\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This ensures that supported locales are chosen based on the device\u2019s settings, and RTL is correctly applied when necessary. For more on detail on these changes, check the ",(0,i.jsx)(n.a,{href:"https://github.com/infinitered/ignite/pull/2770",children:"this PR"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"step-5-add-intl-pluralrules-for-react-i18next-and-json-v4",children:"Step 5: Add intl-pluralrules for react-i18next and JSON v4"}),"\n",(0,i.jsxs)(n.p,{children:["To support pluralization and ",(0,i.jsx)(n.code,{children:"react-i18next"}),"'s JSON v4 format, you\u2019ll need to add the ",(0,i.jsx)(n.code,{children:"intl-pluralrules"})," package:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"yarn add intl-pluralrules\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Make sure to import this package into your i18n configuration file (",(0,i.jsx)(n.code,{children:"app/i18n/i18n.ts"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// success-line\nimport 'intl-pluralrules';\n"})}),"\n",(0,i.jsx)(n.h2,{id:"step-6-update-the-translate-function",children:"Step 6: Update the translate function"}),"\n",(0,i.jsxs)(n.p,{children:["The next step is to replace your old translate function with the one provided by ",(0,i.jsx)(n.code,{children:"react-i18next"}),". This is located in ",(0,i.jsx)(n.code,{children:"app/i18n/translate.ts"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// error-line\nimport { TranslateOptions } from "i18n-js"\n// success-line-start\nimport { TOptions } from "i18next"\nimport { TxKeyPath } from "./i18n"\n// success-line-end\n\n// error-line-start\nexport function translate(key: TxKeyPath, options?: TranslateOptions): string {\n  return i18n.t(key, options)\n// error-line-end\n// success-line-start\nexport function translate(key: TxKeyPath, options?: TOptions) {\n  return i18n.isInitialized ? i18n.t(key, options) : key;\n// success-line-end\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"step-7-update-translation-keys-from-dots--to-colons-",children:"Step 7: Update translation keys from dots (.) to colons (:)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"react-i18next"})," uses different types of separators for translation keys. Colons (:) are used for first-level translations within an object, while dots (.) are used for nested translations. As a result, you\u2019ll need to update all translation keys in your app accordingly. For example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'translate("common.ok")\n'})}),"\n",(0,i.jsx)(n.p,{children:"Should be changed to:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'translate("common:ok")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,i.jsxs)(n.p,{children:["Using Ignite\u2019s boilerplate code, here\u2019s an example of how to replace the separator in ",(0,i.jsx)(n.code,{children:"i18next"}),". We\u2019ll use the ",(0,i.jsx)(n.code,{children:"WelcomeScreen"})," component as a reference:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// error-line-start\nuseHeader(\n  {\n    rightTx: "common.logOut",\n    onRightPress: logout,\n  },\n  [logout],\n)\n// error-line-end\n// success-line-start\nuseHeader(\n  {\n    rightTx: "common:logOut",\n    onRightPress: logout,\n  },\n  [logout],\n)\n// success-line-end\n'})}),"\n",(0,i.jsx)(n.p,{children:"Or from the return statement itself:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'// error-line-start\nreturn (\n  <View style={$container}>\n    <View style={$topContainer}>\n      <Image style={$welcomeLogo} source={welcomeLogo} resizeMode="contain" />\n      <Text\n        testID="welcome-heading"\n        style={$welcomeHeading}\n        tx="welcomeScreen.readyForLaunch"\n        preset="heading"\n      />\n      <Text tx="welcomeScreen.exciting" preset="subheading" />\n      <Image style={$welcomeFace} source={welcomeFace} resizeMode="contain" />\n    </View>\n\n    <View style={[$bottomContainer, $bottomContainerInsets]}>\n      <Text tx="welcomeScreen.postscript" size="md" />\n\n      <Button\n        testID="next-screen-button"\n        preset="reversed"\n        tx="welcomeScreen.letsGo"\n        onPress={goNext}\n      />\n    </View>\n  </View>\n)\n})\n// error-line-end\n// success-line-start\nreturn (\n  <View style={$container}>\n    <View style={$topContainer}>\n      <Image style={$welcomeLogo} source={welcomeLogo} resizeMode="contain" />\n      <Text\n        testID="welcome-heading"\n        style={$welcomeHeading}\n        tx="welcomeScreen:readyForLaunch"\n        preset="heading"\n      />\n      <Text tx="welcomeScreen:exciting" preset="subheading" />\n      <Image style={$welcomeFace} source={welcomeFace} resizeMode="contain" />\n    </View>\n\n    <View style={[$bottomContainer, $bottomContainerInsets]}>\n      <Text tx="welcomeScreen:postscript" size="md" />\n\n      <Button\n        testID="next-screen-button"\n        preset="reversed"\n        tx="welcomeScreen:letsGo"\n        onPress={goNext}\n      />\n    </View>\n  </View>\n)\n})\n// success-line-end\n'})}),"\n",(0,i.jsx)(n.h2,{id:"step-8-update-types-in-i18nts",children:"Step 8: Update types in i18n.ts"}),"\n",(0,i.jsxs)(n.p,{children:["To prevent errors related to the ",(0,i.jsx)(n.code,{children:"tx"})," property and accommodate ",(0,i.jsx)(n.code,{children:"i18next"}),"'s use of ",(0,i.jsx)(n.code,{children:":"})," as the primary separator, we need to update the types in ",(0,i.jsx)(n.code,{children:"app/i18n/i18n.ts"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// error-line-start\ntype RecursiveKeyOf<TObj extends object> = {\n  [TKey in keyof TObj & (string | number)]: RecursiveKeyOfHandleValue<TObj[TKey], `${TKey}`>\n}[keyof TObj & (string | number)]\n\ntype RecursiveKeyOfInner<TObj extends object> = {\n  [TKey in keyof TObj & (string | number)]: RecursiveKeyOfHandleValue<\n    TObj[TKey],\n    `['${TKey}']` | `.${TKey}`\n  >\n}[keyof TObj & (string | number)]\n\ntype RecursiveKeyOfHandleValue<TValue, Text extends string> = TValue extends any[]\n  ? Text\n  : TValue extends object\n  ? Text | `${Text}${RecursiveKeyOfInner<TValue>}`\n  : Text\n// error-line-end\n// success-line-start\ntype RecursiveKeyOf<TObj extends object> = {\n  [TKey in keyof TObj & (string | number)]: RecursiveKeyOfHandleValue<TObj[TKey], `${TKey}`, true>\n}[keyof TObj & (string | number)]\n\ntype RecursiveKeyOfInner<TObj extends object> = {\n  [TKey in keyof TObj & (string | number)]: RecursiveKeyOfHandleValue<TObj[TKey], `${TKey}`, false>\n}[keyof TObj & (string | number)]\n\ntype RecursiveKeyOfHandleValue<\n  TValue,\n  Text extends string,\n  IsFirstLevel extends boolean,\n> = TValue extends any[]\n  ? Text\n  : TValue extends object\n    ? IsFirstLevel extends true\n      ? Text | `${Text}:${RecursiveKeyOfInner<TValue>}`\n      : Text | `${Text}.${RecursiveKeyOfInner<TValue>}`\n    : Text\n// success-line-end\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["Lastly, update the usage of ",(0,i.jsx)(n.code,{children:"i18n"}),"'s ",(0,i.jsx)(n.code,{children:"locale"})," method to ",(0,i.jsx)(n.code,{children:"language"})," instead. For example in ",(0,i.jsx)(n.code,{children:"app/utils/formatDate.ts"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// error-line\nimport { i18n } from "app/i18n"\n// success-line\nimport i18next from "i18next"\n\n// ...extra file logic\n\n// error-line\nconst locale = i18n.locale.split("-")[0]\n// success-line\nconst locale = i18next.language.split("-")[0]\n'})}),"\n",(0,i.jsx)(n.p,{children:"For detailed code changes, including initialization updates, translation function updates, and testing, refer to the following PRs on the Ignite Github repo:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/infinitered/ignite/pull/2770",children:"Swap out i18n-js for react-18next"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/infinitered/ignite/pull/2788",children:"Fix language switching and update date-fns to v4"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["By following this guide, you will be able to seamlessly transition your React Native app from ",(0,i.jsx)(n.code,{children:"i18n-js"})," to ",(0,i.jsx)(n.code,{children:"react-i18next"}),", ensuring improved localization features and support for modern internationalization practices. Let us know if you have any questions!"]})]})}function p(e={}){const{wrapper:n}={...(0,s.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},2172:(e,n,t)=>{t.d(n,{I:()=>o,M:()=>a});var i=t(1504);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);