"use strict";(self.webpackChunkignite_cookbook=self.webpackChunkignite_cookbook||[]).push([[1264],{5800:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var o=n(7624),i=n(2172);const r={title:"Scrolling to a location that hasn't been rendered using FlatList or SectionList",description:"This article explains how to scroll to a location of a FlatList or SectionList that hasn't rendered yet",tags:["UI","FlatList","SectionList","scrollTo"],last_update:{author:"Mark Rickert"},publish_date:new Date("2022-10-09T00:00:00.000Z")},s=void 0,a={id:"recipes/UnrenderedItemInScrollView",title:"Scrolling to a location that hasn't been rendered using FlatList or SectionList",description:"This article explains how to scroll to a location of a FlatList or SectionList that hasn't rendered yet",source:"@site/docs/recipes/UnrenderedItemInScrollView.md",sourceDirName:"recipes",slug:"/recipes/UnrenderedItemInScrollView",permalink:"/docs/recipes/UnrenderedItemInScrollView",draft:!1,unlisted:!1,tags:[{label:"UI",permalink:"/docs/tags/ui"},{label:"FlatList",permalink:"/docs/tags/flat-list"},{label:"SectionList",permalink:"/docs/tags/section-list"},{label:"scrollTo",permalink:"/docs/tags/scroll-to"}],version:"current",lastUpdatedBy:"Mark Rickert",lastUpdatedAt:1718629494,formattedLastUpdatedAt:"Jun 17, 2024",frontMatter:{title:"Scrolling to a location that hasn't been rendered using FlatList or SectionList",description:"This article explains how to scroll to a location of a FlatList or SectionList that hasn't rendered yet",tags:["UI","FlatList","SectionList","scrollTo"],last_update:{author:"Mark Rickert"},publish_date:"2022-10-09T00:00:00.000Z"},sidebar:"mainSidebar",previous:{title:"Universal E2E Testing with Detox and Playwright",permalink:"/docs/recipes/UniversalE2ETesting"},next:{title:"Updating Dependencies with Yarn Audit, Outdated and Upgrade",permalink:"/docs/recipes/UpdatingDependencies"}},l={},c=[];function d(e){const t={code:"code",p:"p",pre:"pre",...(0,i.M)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["Calling ",(0,o.jsx)(t.code,{children:"scrollViewRef.current.scrollToLocation()"})," on a React Native ",(0,o.jsx)(t.code,{children:"FlatList"})," or ",(0,o.jsx)(t.code,{children:"SectionList"})," will fail on occasion because it can't scroll to a location that hasn't been rendered yet."]}),"\n",(0,o.jsxs)(t.p,{children:["The solution to this is implementing ",(0,o.jsx)(t.code,{children:"onScrollToIndexFailed"})," with some sort of recovery functionality to keep trying the scroll. This is a Higher Order Component (HOC) for ",(0,o.jsx)(t.code,{children:"SectionList"})," that handles this for us."]}),"\n",(0,o.jsxs)(t.p,{children:["This component basically tries over and over to scroll to the requested location until it gets it right and no longer calls ",(0,o.jsx)(t.code,{children:"onScrollToIndexFailed"}),"."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:"import * as React from 'react';\nimport { SectionList, SectionListProps, SectionListScrollParams } from 'react-native';\n\ninterface SectionListHandle {\n  scrollToLocation: (params: SectionListScrollParams) => void;\n}\n\n/**\n * This is a wrapper around react-native's SectionList that adds protection against scrolling to an\n * unknown (not rendered yet) location. This is useful for cases where the user wants to scroll to a\n * position very far down the list but we haven't rendered that far yet.\n *\n * This adds onScrollToIndexFailed property to SectionList so that if the scroll fails, we calculate the approximate\n * scroll position, scroll there, and then try again to get the exact position requested.\n *\n * Essentially, it's a \"guess the position and retry the operation\" strategy until the list is scrolled to the\n * correct location.\n */\nexport const ScrollProtectedSectionList = React.forwardRef<\n  SectionListHandle,\n  SectionListProps<any, any>\n>((props, forwardedRef) => {\n  const internalRef = React.useRef<SectionList>(null);\n  const [lastScrollRequest, setLastScrollRequest] = React.useState<SectionListScrollParams>();\n  const timeout = React.useRef<ReturnType<typeof setTimeout>>();\n\n  const onScrollToIndexFailed = (info: {\n    index: number;\n    highestMeasuredFrameIndex: number;\n    averageItemLength: number;\n  }) => {\n    console.log('ScrollProtectedSectionList.onScrollToIndexFailed', info);\n\n    // Calculate the possible position of the item and scroll there using the internal scroll responder.\n    const offset = info.averageItemLength * info.index;\n    internalRef.current?.getScrollResponder()?.scrollTo({ x: 0, y: offset, animated: false });\n\n    // If we know exactly where we want to scroll to, we can just scroll now since the item is likely visible.\n    // Otherwise it'll call this function recursively again.\n    if (lastScrollRequest) {\n      timeout.current = setTimeout(() => {\n        internalRef.current?.scrollToLocation(lastScrollRequest);\n      }, 100);\n    }\n  };\n\n  // Clear the timeout if it still exists when the component unmounts.\n  React.useEffect(() => {\n    return () => timeout.current && clearTimeout(timeout.current);\n  }, []);\n\n  React.useImperativeHandle(\n    forwardedRef,\n    () => ({\n      scrollToLocation: (params: SectionListScrollParams) => {\n        internalRef.current?.scrollToLocation(params);\n        setLastScrollRequest(params);\n      },\n    }),\n    [internalRef],\n  );\n\n  return <SectionList {...props} ref={internalRef} onScrollToIndexFailed={onScrollToIndexFailed} />;\n});\n"})})]})}function u(e={}){const{wrapper:t}={...(0,i.M)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},2172:(e,t,n)=>{n.d(t,{I:()=>a,M:()=>s});var o=n(1504);const i={},r=o.createContext(i);function s(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);