"use strict";(self.webpackChunkignite_cookbook=self.webpackChunkignite_cookbook||[]).push([[4224],{4068:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var t=o(7624),r=o(2172);const s={title:"Switch Between Expo Go and Expo CNG",description:"Switch an Expo Go project to an Expo CNG project and visa versa",tags:["Expo"],last_update:{author:"Justin Poliachik"},publish_date:new Date("2024-01-11T00:00:00.000Z")},i="Switch a Project Between Expo Go and Expo CNG",a={id:"recipes/SwitchBetweenExpoGoCNG",title:"Switch Between Expo Go and Expo CNG",description:"Switch an Expo Go project to an Expo CNG project and visa versa",source:"@site/docs/recipes/SwitchBetweenExpoGoCNG.md",sourceDirName:"recipes",slug:"/recipes/SwitchBetweenExpoGoCNG",permalink:"/docs/recipes/SwitchBetweenExpoGoCNG",draft:!1,unlisted:!1,tags:[{label:"Expo",permalink:"/docs/tags/expo"}],version:"current",lastUpdatedBy:"Justin Poliachik",lastUpdatedAt:1731512989,formattedLastUpdatedAt:"Nov 13, 2024",frontMatter:{title:"Switch Between Expo Go and Expo CNG",description:"Switch an Expo Go project to an Expo CNG project and visa versa",tags:["Expo"],last_update:{author:"Justin Poliachik"},publish_date:"2024-01-11T00:00:00.000Z"},sidebar:"mainSidebar",previous:{title:"Setting up a Yarn monorepo with Ignite",permalink:"/docs/recipes/SettingUpYarnMonorepo"},next:{title:"Theming Ignite with Emotion.js",permalink:"/docs/recipes/Theming-Emotion"}},c={},l=[{value:"Expo Go -&gt; Expo CNG",id:"expo-go---expo-cng",level:2},{value:"Expo CNG -&gt; Expo Go",id:"expo-cng---expo-go",level:2},{value:"Steps",id:"steps",level:3},{value:"Update <code>package.json</code> scripts",id:"update-packagejson-scripts",level:4},{value:"Remove native directories",id:"remove-native-directories",level:4},{value:"Remove<code>react-native-mmkv</code> in favor of <code>@react-native-async-storage/async-storage</code>",id:"removereact-native-mmkv-in-favor-of-react-native-async-storageasync-storage",level:4},{value:"Remove<code>react-native-keyboard-controller</code>",id:"removereact-native-keyboard-controller",level:4},{value:"Sync Expo packages to be compatible with Expo Go",id:"sync-expo-packages-to-be-compatible-with-expo-go",level:4},{value:"Run the app!",id:"run-the-app",level:4}];function p(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.M)(),...e.components},{Details:o}=n;return o||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"switch-a-project-between-expo-go-and-expo-cng",children:"Switch a Project Between Expo Go and Expo CNG"}),"\n",(0,t.jsx)(n.p,{children:"If you created an Ignite project using the Expo Go workflow and you need to transition to Expo CNG (Continuous Native Generation) or visa versa, this guide will teach you how to reconfigure your project."}),"\n",(0,t.jsx)(n.h2,{id:"expo-go---expo-cng",children:"Expo Go -> Expo CNG"}),"\n",(0,t.jsx)(n.p,{children:"If you started with Expo Go but now need to add a library with native code, create your own custom native code, or modify native project configuration, you'll no longer be able to run your app inside Expo Go."}),"\n",(0,t.jsxs)(n.p,{children:["Thankfully, this is super easy thanks to ",(0,t.jsx)(n.a,{href:"https://docs.expo.dev/workflow/continuous-native-generation/",children:"Expo's Continuous Native Generation"}),"!\nWe only need to slightly change how we build & run our app."]}),"\n",(0,t.jsxs)(n.p,{children:["In ",(0,t.jsx)(n.code,{children:"package.json"}),", modify scripts:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-diff",children:'--"android": "npx expo start --android",\n--"ios": "npx expo start --ios",\n++"android": "npx expo run:android",\n++"ios": "npx expo run:ios",\n'})}),"\n",(0,t.jsx)(n.p,{children:"Expo handles the rest!"}),"\n",(0,t.jsxs)(n.p,{children:["When you run ",(0,t.jsx)(n.code,{children:"npm run ios"})," or ",(0,t.jsx)(n.code,{children:"npm run android"}),", Expo will generate native projects and create ",(0,t.jsx)(n.code,{children:"ios"})," and ",(0,t.jsx)(n.code,{children:"android"})," directories, create a development build, and launch your standalone app. You are now successfully using Expo CNG!"]}),"\n",(0,t.jsxs)(n.p,{children:["To learn more, check out Expo's documentation on ",(0,t.jsx)(n.a,{href:"https://docs.expo.dev/workflow/customizing/",children:"adding custom native code"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"expo-cng---expo-go",children:"Expo CNG -> Expo Go"}),"\n",(0,t.jsx)(n.p,{children:"If you started with Expo CNG workflow, but your app isn't utilizing any custom native functionality and you want to use Expo Go for developing your app, follow these steps!"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Important Note"}),": To successfully run your app using Expo Go, your project must not contain ",(0,t.jsx)(n.em,{children:"any"})," custom native code, project configuration, or native libraries outside of the ",(0,t.jsx)(n.a,{href:"https://docs.expo.dev/versions/latest/",children:"Expo SDK"}),". Your project also can't contain any ",(0,t.jsx)(n.code,{children:"expo.plugins"})," inside your ",(0,t.jsx)(n.code,{children:"app.json"}),". If your app contains native code, libraries, configuration, or plugins and you attempt to run inside Expo Go, expect your app to crash or not function properly."]}),"\n",(0,t.jsx)(n.h3,{id:"steps",children:"Steps"}),"\n",(0,t.jsxs)(n.h4,{id:"update-packagejson-scripts",children:["Update ",(0,t.jsx)(n.code,{children:"package.json"})," scripts"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-diff",children:'--"android": "npx expo run:android",\n--"ios": "npx expo run:ios",\n++"android": "npx expo start --android",\n++"ios": "npx expo start --ios",\n'})}),"\n",(0,t.jsx)(n.h4,{id:"remove-native-directories",children:"Remove native directories"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"rm -rf android ios\n"})}),"\n",(0,t.jsxs)(n.h4,{id:"removereact-native-mmkv-in-favor-of-react-native-async-storageasync-storage",children:["Remove",(0,t.jsx)(n.code,{children:"react-native-mmkv"})," in favor of ",(0,t.jsx)(n.code,{children:"@react-native-async-storage/async-storage"})]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Swap packages"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"yarn remove react-native-mmkv\nnpx expo install @react-native-async-storage/async-storage\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsxs)(n.li,{children:["Update the storage util in ",(0,t.jsx)(n.code,{children:"app/utils/storage.ts"})]}),"\n"]}),"\n",(0,t.jsxs)(n.h4,{id:"removereact-native-keyboard-controller",children:["Remove",(0,t.jsx)(n.code,{children:"react-native-keyboard-controller"})]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Remove the package"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"yarn remove react-native-keyboard-controller\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsxs)(n.li,{children:["Remove the ",(0,t.jsx)(n.code,{children:"<KeyboardProvider>"})," in ",(0,t.jsx)(n.code,{children:"app/app.tsx"})]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-diff",children:'-import { KeyboardProvider } from "react-native-keyboard-controller"\n\n// ...\n\nreturn (\n  <SafeAreaProvider initialMetrics={initialWindowMetrics}>\n    <ErrorBoundary catchErrors={Config.catchErrors}>\n-      <KeyboardProvider>\n        <AppNavigator\n          linking={linking}\n          initialState={initialNavigationState}\n          onStateChange={onNavigationStateChange}\n        />\n-      </KeyboardProvider>\n    </ErrorBoundary>\n  </SafeAreaProvider>\n)\n'})}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsxs)(n.li,{children:["Update ",(0,t.jsx)(n.code,{children:"app/components/Screen.tsx"})]}),"\n"]}),"\n",(0,t.jsxs)(o,{children:[(0,t.jsx)("summary",{children:"Screen.tsx (expand to copy)"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",metastring:'title="/app/components/Screen.tsx"',children:'import { useScrollToTop } from "@react-navigation/native";\nimport { StatusBar, StatusBarProps, StatusBarStyle } from "expo-status-bar";\nimport React, { useRef, useState } from "react";\nimport {\n  KeyboardAvoidingView,\n  KeyboardAvoidingViewProps,\n  LayoutChangeEvent,\n  Platform,\n  ScrollView,\n  ScrollViewProps,\n  StyleProp,\n  View,\n  ViewStyle,\n} from "react-native";\nimport { $styles } from "@/theme";\nimport { ExtendedEdge, useSafeAreaInsetsStyle } from "@/utils/useSafeAreaInsetsStyle";\nimport { useAppTheme } from "@/utils/useAppTheme";\n\ninterface BaseScreenProps {\n  /**\n   * Children components.\n   */\n  children?: React.ReactNode;\n  /**\n   * Style for the outer content container useful for padding & margin.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the inner content container useful for padding & margin.\n   */\n  contentContainerStyle?: StyleProp<ViewStyle>;\n  /**\n   * Override the default edges for the safe area.\n   */\n  safeAreaEdges?: ExtendedEdge[];\n  /**\n   * Background color\n   */\n  backgroundColor?: string;\n  /**\n   * Status bar setting. Defaults to dark.\n   */\n  statusBarStyle?: StatusBarStyle;\n  /**\n   * By how much should we offset the keyboard? Defaults to 0.\n   */\n  keyboardOffset?: number;\n  /**\n   * Pass any additional props directly to the StatusBar component.\n   */\n  StatusBarProps?: StatusBarProps;\n  /**\n   * Pass any additional props directly to the KeyboardAvoidingView component.\n   */\n  KeyboardAvoidingViewProps?: KeyboardAvoidingViewProps;\n}\n\ninterface FixedScreenProps extends BaseScreenProps {\n  preset?: "fixed";\n}\ninterface ScrollScreenProps extends BaseScreenProps {\n  preset?: "scroll";\n  /**\n   * Should keyboard persist on screen tap. Defaults to handled.\n   * Only applies to scroll preset.\n   */\n  keyboardShouldPersistTaps?: "handled" | "always" | "never";\n  /**\n   * Pass any additional props directly to the ScrollView component.\n   */\n  ScrollViewProps?: ScrollViewProps;\n}\n\ninterface AutoScreenProps extends Omit<ScrollScreenProps, "preset"> {\n  preset?: "auto";\n  /**\n   * Threshold to trigger the automatic disabling/enabling of scroll ability.\n   * Defaults to `{ percent: 0.92 }`.\n   */\n  scrollEnabledToggleThreshold?: { percent?: number; point?: number };\n}\n\nexport type ScreenProps = ScrollScreenProps | FixedScreenProps | AutoScreenProps;\n\nconst isIos = Platform.OS === "ios";\n\ntype ScreenPreset = "fixed" | "scroll" | "auto";\n\n/**\n * @param {ScreenPreset?} preset - The preset to check.\n * @returns {boolean} - Whether the preset is non-scrolling.\n */\nfunction isNonScrolling(preset?: ScreenPreset) {\n  return !preset || preset === "fixed";\n}\n\n/**\n * Custom hook that handles the automatic enabling/disabling of scroll ability based on the content size and screen size.\n * @param {UseAutoPresetProps} props - The props for the `useAutoPreset` hook.\n * @returns {{boolean, Function, Function}} - The scroll state, and the `onContentSizeChange` and `onLayout` functions.\n */\nfunction useAutoPreset(props: AutoScreenProps): {\n  scrollEnabled: boolean;\n  onContentSizeChange: (w: number, h: number) => void;\n  onLayout: (e: LayoutChangeEvent) => void;\n} {\n  const { preset, scrollEnabledToggleThreshold } = props;\n  const { percent = 0.92, point = 0 } = scrollEnabledToggleThreshold || {};\n\n  const scrollViewHeight = useRef<null | number>(null);\n  const scrollViewContentHeight = useRef<null | number>(null);\n  const [scrollEnabled, setScrollEnabled] = useState(true);\n\n  function updateScrollState() {\n    if (scrollViewHeight.current === null || scrollViewContentHeight.current === null) return;\n\n    // check whether content fits the screen then toggle scroll state according to it\n    const contentFitsScreen = (function () {\n      if (point) {\n        return scrollViewContentHeight.current < scrollViewHeight.current - point;\n      } else {\n        return scrollViewContentHeight.current < scrollViewHeight.current * percent;\n      }\n    })();\n\n    // content is less than the size of the screen, so we can disable scrolling\n    if (scrollEnabled && contentFitsScreen) setScrollEnabled(false);\n\n    // content is greater than the size of the screen, so let\'s enable scrolling\n    if (!scrollEnabled && !contentFitsScreen) setScrollEnabled(true);\n  }\n\n  /**\n   * @param {number} w - The width of the content.\n   * @param {number} h - The height of the content.\n   */\n  function onContentSizeChange(w: number, h: number) {\n    // update scroll-view content height\n    scrollViewContentHeight.current = h;\n    updateScrollState();\n  }\n\n  /**\n   * @param {LayoutChangeEvent} e = The layout change event.\n   */\n  function onLayout(e: LayoutChangeEvent) {\n    const { height } = e.nativeEvent.layout;\n    // update scroll-view  height\n    scrollViewHeight.current = height;\n    updateScrollState();\n  }\n\n  // update scroll state on every render\n  if (preset === "auto") updateScrollState();\n\n  return {\n    scrollEnabled: preset === "auto" ? scrollEnabled : true,\n    onContentSizeChange,\n    onLayout,\n  };\n}\n\n/**\n * @param {ScreenProps} props - The props for the `ScreenWithoutScrolling` component.\n * @returns {JSX.Element} - The rendered `ScreenWithoutScrolling` component.\n */\nfunction ScreenWithoutScrolling(props: ScreenProps) {\n  const { style, contentContainerStyle, children } = props;\n  return (\n    <View style={[$outerStyle, style]}>\n      <View style={[$innerStyle, contentContainerStyle]}>{children}</View>\n    </View>\n  );\n}\n\n/**\n * @param {ScreenProps} props - The props for the `ScreenWithScrolling` component.\n * @returns {JSX.Element} - The rendered `ScreenWithScrolling` component.\n */\nfunction ScreenWithScrolling(props: ScreenProps) {\n  const {\n    children,\n    keyboardShouldPersistTaps = "handled",\n    contentContainerStyle,\n    ScrollViewProps,\n    style,\n  } = props as ScrollScreenProps;\n\n  const ref = useRef<ScrollView>(null);\n\n  const { scrollEnabled, onContentSizeChange, onLayout } = useAutoPreset(props as AutoScreenProps);\n\n  // Add native behavior of pressing the active tab to scroll to the top of the content\n  // More info at: https://reactnavigation.org/docs/use-scroll-to-top/\n  useScrollToTop(ref);\n\n  return (\n    <ScrollView\n      {...{ keyboardShouldPersistTaps, scrollEnabled, ref }}\n      {...ScrollViewProps}\n      onLayout={(e) => {\n        onLayout(e);\n        ScrollViewProps?.onLayout?.(e);\n      }}\n      onContentSizeChange={(w: number, h: number) => {\n        onContentSizeChange(w, h);\n        ScrollViewProps?.onContentSizeChange?.(w, h);\n      }}\n      style={[$outerStyle, ScrollViewProps?.style, style]}\n      contentContainerStyle={[\n        $innerStyle,\n        ScrollViewProps?.contentContainerStyle,\n        contentContainerStyle,\n      ]}\n    >\n      {children}\n    </ScrollView>\n  );\n}\n\n/**\n * Represents a screen component that provides a consistent layout and behavior for different screen presets.\n * The `Screen` component can be used with different presets such as "fixed", "scroll", or "auto".\n * It handles safe area insets, status bar settings, keyboard avoiding behavior, and scrollability based on the preset.\n * @see [Documentation and Examples]{@link https://docs.infinite.red/ignite-cli/boilerplate/app/components/Screen/}\n * @param {ScreenProps} props - The props for the `Screen` component.\n * @returns {JSX.Element} The rendered `Screen` component.\n */\nexport function Screen(props: ScreenProps) {\n  const {\n    theme: { colors },\n    themeContext,\n  } = useAppTheme();\n  const {\n    backgroundColor,\n    KeyboardAvoidingViewProps,\n    keyboardOffset = 0,\n    safeAreaEdges,\n    StatusBarProps,\n    statusBarStyle,\n  } = props;\n\n  const $containerInsets = useSafeAreaInsetsStyle(safeAreaEdges);\n\n  return (\n    <View\n      style={[\n        $containerStyle,\n        { backgroundColor: backgroundColor || colors.background },\n        $containerInsets,\n      ]}\n    >\n      <StatusBar\n        style={statusBarStyle || (themeContext === "dark" ? "light" : "dark")}\n        {...StatusBarProps}\n      />\n\n      <KeyboardAvoidingView\n        behavior={isIos ? "padding" : "height"}\n        keyboardVerticalOffset={keyboardOffset}\n        {...KeyboardAvoidingViewProps}\n        style={[$styles.flex1, KeyboardAvoidingViewProps?.style]}\n      >\n        {isNonScrolling(props.preset) ? (\n          <ScreenWithoutScrolling {...props} />\n        ) : (\n          <ScreenWithScrolling {...props} />\n        )}\n      </KeyboardAvoidingView>\n    </View>\n  );\n}\n\nconst $containerStyle: ViewStyle = {\n  flex: 1,\n  height: "100%",\n  width: "100%",\n};\n\nconst $outerStyle: ViewStyle = {\n  flex: 1,\n  height: "100%",\n  width: "100%",\n};\n\nconst $innerStyle: ViewStyle = {\n  justifyContent: "flex-start",\n  alignItems: "stretch",\n};\n'})})]}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.h4,{id:"sync-expo-packages-to-be-compatible-with-expo-go",children:"Sync Expo packages to be compatible with Expo Go"}),"\n",(0,t.jsxs)(n.p,{children:["Running ",(0,t.jsx)(n.code,{children:"npx expo install --check"})," will check all of the expo packages in their SDK against the version of ",(0,t.jsx)(n.code,{children:"expo"})," that is installed to ensure compatibility."]}),"\n",(0,t.jsxs)(n.p,{children:["You can accept these changes or run ",(0,t.jsx)(n.code,{children:"npx expo install --fix"})," to apply them directly without running the check."]}),"\n",(0,t.jsx)(n.h4,{id:"run-the-app",children:"Run the app!"}),"\n",(0,t.jsxs)(n.p,{children:["That's it! You should be able to run ",(0,t.jsx)(n.code,{children:"yarn start"})," and tap ",(0,t.jsx)(n.code,{children:"i"})," or ",(0,t.jsx)(n.code,{children:"a"})," in terminal to launch iOS or Android respectively in Expo Go."]})]})}function d(e={}){const{wrapper:n}={...(0,r.M)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},2172:(e,n,o)=>{o.d(n,{I:()=>a,M:()=>i});var t=o(1504);const r={},s=t.createContext(r);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);